import requests
import json
import html
from aiogram import Router, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from bot.menus.xrp_menu import back_to_xrp_menu, xrp_menu, cancel_check_menu, confirm_cancel_menu
from bot.filters.admin_filter import is_admin
from config.config import RIPPLE_IP, RIPPLE_PORT, RIPPLE_LOGIN, RIPPLE_PASSWORD
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

xrp_router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è XRP –∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@xrp_router.callback_query(lambda call: call.data in ["xrp_menu", "xrp_info", "xrp_generate_address", "back_to_xrp_menu"])
@is_admin
async def xrp_menu_handler(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    if callback_query.data == "xrp_menu":
        await callback_query.message.edit_text("XRP Menu:", reply_markup=xrp_menu())
    elif callback_query.data == "xrp_info":
        await get_xrp_info(callback_query)
    elif callback_query.data == "xrp_generate_address":
        await generate_xrp_address(callback_query)
    elif callback_query.data == "back_to_xrp_menu":
        await callback_query.message.edit_text("XRP Menu:", reply_markup=xrp_menu())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ XRP
async def get_xrp_info(callback_query: CallbackQuery, **kwargs):
    url = f"http://{RIPPLE_IP}:{RIPPLE_PORT}/"
    headers = {'content-type': 'application/json'}
    
    data = {
        "method": "server_info",
        "params": [{}]
    }

    try:
        response = requests.post(url, auth=(RIPPLE_LOGIN, RIPPLE_PASSWORD), data=json.dumps(data), headers=headers)
        result = response.json()

        if 'result' in result and 'info' in result['result']:
            info = result['result']['info']
            build_version = info.get("build_version", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            complete_ledgers = info.get("complete_ledgers", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            server_state = info.get("server_state", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            uptime = info.get("uptime", 0)
            ledger_seq = info.get("validated_ledger", {}).get("seq", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            formatted_info = (
                f"üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–µ Ripple (XRP):</b>\n\n"
                f"üåê <b>–í–µ—Ä—Å–∏—è:</b> {build_version}\n"
                f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏:</b> {complete_ledgers}\n"
                f"‚öôÔ∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:</b> {server_state}\n"
                f"üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–µ–∫):</b> {uptime}\n"
                f"üîó <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫:</b> #{ledger_seq}\n"
            )
        else:
            formatted_info = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ Ripple."
    except Exception as e:
        formatted_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ: {html.escape(str(e))}"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await callback_query.message.edit_text(formatted_info, reply_markup=back_to_xrp_menu(), parse_mode=ParseMode.HTML)
    await callback_query.answer()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ XRP
async def generate_xrp_address(callback_query: CallbackQuery, **kwargs):
    url = f"http://{RIPPLE_IP}:{RIPPLE_PORT}/"
    headers = {'content-type': 'application/json'}
    
    data = {
        "method": "wallet_propose",
        "params": [{}]
    }

    try:
        response = requests.post(url, auth=(RIPPLE_LOGIN, RIPPLE_PASSWORD), data=json.dumps(data), headers=headers)
        result = response.json()

        if 'result' in result and 'account_id' in result['result']:
            address = result['result']['account_id']
            formatted_info = f"üéâ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: `{address}`"
        else:
            formatted_info = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å."
    except Exception as e:
        formatted_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {html.escape(str(e))}"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await callback_query.message.edit_text(formatted_info, reply_markup=xrp_menu(), parse_mode=ParseMode.HTML)
    await callback_query.answer()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ XRP
async def generate_xrp_address(callback_query: types.CallbackQuery, **kwargs):
    url = f"http://{RIPPLE_IP}:{RIPPLE_PORT}/"
    headers = {'content-type': 'application/json'}
    
    data = {
        "method": "wallet_propose",
        "params": [{}]
    }

    try:
        response = requests.post(url, auth=(RIPPLE_LOGIN, RIPPLE_PASSWORD), data=json.dumps(data), headers=headers)
        result = response.json()

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("Response Status Code:", response.status_code)
        print("Response JSON:", result)

        if 'result' in result and result['result']['status'] == 'success':
            wallet = result['result']
            address = wallet.get("account_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            public_key = wallet.get("public_key", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            master_key = wallet.get("master_key", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            master_seed = wallet.get("master_seed", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            formatted_address_info = (
                f"üÜî <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</b> {address}\n"
                f"üîë <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</b> {public_key}\n"
                f"üóù <b>–ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á:</b> {master_key}\n"
                f"üå± <b>–ú–∞—Å—Ç–µ—Ä-Seed:</b> {master_seed}\n"
            )
        else:
            formatted_address_info = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + json.dumps(result)
    except Exception as e:
        formatted_address_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥—Ä–µ—Å–∞: {str(e)}"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–¥—Ä–µ—Å–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await callback_query.message.edit_text(formatted_address_info, reply_markup=xrp_menu(), parse_mode=ParseMode.HTML)
    await callback_query.answer()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ XRP
async def generate_xrp_address(callback_query: types.CallbackQuery, **kwargs):
    url = f"http://{RIPPLE_IP}:{RIPPLE_PORT}/"
    headers = {'content-type': 'application/json'}
    
    data = {
        "method": "wallet_propose",
        "params": [{}]
    }

    try:
        response = requests.post(url, auth=(RIPPLE_LOGIN, RIPPLE_PASSWORD), data=json.dumps(data), headers=headers)
        result = response.json()

        if 'result' in result and result['result']['status'] == 'success':
            wallet = result['result']
            address = wallet.get("account_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            public_key = wallet.get("public_key", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            master_key = wallet.get("master_key", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            master_seed = wallet.get("master_seed", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            formatted_address_info = (
                f"üÜî <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</b>\n<code>{address}</code>\n\n"
                f"üîë <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</b>\n<code>{public_key}</code>\n\n"
                f"üóù <b>–ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á:</b>\n<code>{master_key}</code>\n\n"
                f"üå± <b>–ú–∞—Å—Ç–µ—Ä-Seed:</b>\n<code>{master_seed}</code>\n"
            )
        else:
            formatted_address_info = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + json.dumps(result)
    except Exception as e:
        formatted_address_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥—Ä–µ—Å–∞: {str(e)}"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–¥—Ä–µ—Å–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await callback_query.message.edit_text(formatted_address_info, reply_markup=back_to_xrp_menu(), parse_mode=ParseMode.HTML)
    await callback_query.answer()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é XRP
def back_to_xrp_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_xrp_menu")]
    ])
    return keyboard



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ XRP
class WithdrawXRPState(StatesGroup):
    waiting_for_sender_address = State()
    waiting_for_private_key = State()
    waiting_for_destination_address = State()
    waiting_for_amount = State()

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ XRP
@xrp_router.callback_query(lambda call: call.data == "xrp_withdraw")
@is_admin
async def start_withdraw(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    response_message = await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à XRP –∞–¥—Ä–µ—Å:", reply_markup=cancel_check_menu())
    await state.update_data(address_message_id=response_message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(WithdrawXRPState.waiting_for_sender_address)

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
@xrp_router.message(WithdrawXRPState.waiting_for_sender_address)
async def handle_sender_address(message: types.Message, state: FSMContext, **kwargs):
    sender_address = message.text
    if not sender_address:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    if "address_message_id" in user_data:
        try:
            await message.bot.delete_message(message.chat.id, user_data['address_message_id'])
        except Exception:
            pass

    await message.delete()

    await state.update_data(sender_address=sender_address)

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    response_message = await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=cancel_check_menu())
    await state.update_data(private_key_message_id=response_message.message_id)
    await state.set_state(WithdrawXRPState.waiting_for_private_key)

# –í–≤–æ–¥ —Å—É–º–º—ã
@xrp_router.message(WithdrawXRPState.waiting_for_amount)
async def handle_amount(message: types.Message, state: FSMContext, **kwargs):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
    user_data = await state.get_data()
    if "amount_message_id" in user_data:
        try:
            await message.bot.delete_message(message.chat.id, user_data['amount_message_id'])
        except Exception:
            pass

    await message.delete()

    await state.update_data(amount=amount)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    confirmation_message = await message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} XRP –Ω–∞ –∞–¥—Ä–µ—Å {user_data['destination_address']}.\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.",
        reply_markup=confirm_cancel_menu(user_data['destination_address'], amount)
    )
    await state.update_data(confirmation_message_id=confirmation_message.message_id)

# –í–≤–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
@xrp_router.message(WithdrawXRPState.waiting_for_private_key)
async def handle_private_key(message: types.Message, state: FSMContext, **kwargs):
    private_key = message.text
    if not private_key:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    user_data = await state.get_data()
    if "private_key_message_id" in user_data:
        try:
            await message.bot.delete_message(message.chat.id, user_data['private_key_message_id'])
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª—é—á–æ–º
    try:
        await message.delete()
    except Exception:
        pass

    await state.update_data(private_key=private_key)

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    response_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=cancel_check_menu())
    await state.update_data(destination_address_message_id=response_message.message_id)
    await state.set_state(WithdrawXRPState.waiting_for_destination_address)

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
@xrp_router.message(WithdrawXRPState.waiting_for_destination_address)
async def handle_destination_address(message: types.Message, state: FSMContext, **kwargs):
    destination_address = message.text
    if not destination_address:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    if "destination_address_message_id" in user_data:
        try:
            await message.bot.delete_message(message.chat.id, user_data['destination_address_message_id'])
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
    try:
        await message.delete()
    except Exception:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await state.update_data(destination_address=destination_address)

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã
    response_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=cancel_check_menu())
    await state.update_data(amount_message_id=response_message.message_id)
    await state.set_state(WithdrawXRPState.waiting_for_amount)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@xrp_router.callback_query(lambda call: call.data.startswith("confirm_withdraw_"))
async def confirm_withdraw(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    sender_address = user_data.get('sender_address')
    private_key = user_data.get('private_key')
    destination_address = user_data.get('destination_address')
    amount = user_data.get('amount')

    if not sender_address or not private_key or not destination_address or not amount:
        await call.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return

    url = f"http://{RIPPLE_IP}:{RIPPLE_PORT}/"
    headers = {'content-type': 'application/json'}

    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é (fee)
    fee_data = {
        "method": "fee",
        "params": [{}]
    }

    try:
        fee_response = requests.post(url, data=json.dumps(fee_data), headers=headers)
        fee_result = fee_response.json()

        if fee_result.get('result', {}).get('status') == 'success':
            fee = fee_result['result']['drops']['open_ledger_fee']
        else:
            await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏: {fee_result['result'].get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=xrp_menu())
            return

    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏: {html.escape(str(e))}", reply_markup=xrp_menu())
        return

    # –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ XRP
    transaction_data = {
        "method": "submit",
        "params": [{
            "secret": private_key,
            "tx_json": {
                "TransactionType": "Payment",
                "Account": sender_address,
                "Amount": str(int(amount * 1_000_000)),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ –¥—Ä–æ–ø—ã (1 XRP = 1,000,000 –¥—Ä–æ–ø–æ–≤)
                "Destination": destination_address,
                "Fee": fee  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            }
        }]
    }

    try:
        response = requests.post(url, data=json.dumps(transaction_data), headers=headers)
        result = response.json()

        if result.get('result', {}).get('status') == 'success':
            tx_id = result['result'].get('tx_json', {}).get('hash', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TXID')
            await call.message.answer(f"‚úÖ XRP —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! TXID: <code>{tx_id}</code>", reply_markup=xrp_menu(), parse_mode=ParseMode.HTML)
        else:
            error_message = result['result'].get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ XRP: {error_message}", reply_markup=xrp_menu())
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ XRP: {html.escape(str(e))}", reply_markup=xrp_menu())

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@xrp_router.callback_query(lambda call: call.data == "cancel_check_address")
async def cancel_withdraw(call: CallbackQuery, state: FSMContext, **kwargs):
    await state.clear()
    await call.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=xrp_menu())