import requests
import json
import html
from aiogram import Router, types
from aiogram.types import CallbackQuery, Message
from aiogram.enums import ParseMode
from bot.menus.ltc_menu import ltc_menu, confirm_cancel_menu, cancel_check_menu
from bot.menus.main_menu import main_menu
from bot.filters.admin_filter import is_admin
from config.config import LITECOIN_IP, LITECOIN_PORT, LITECOIN_LOGIN, LITECOIN_PASSWORD
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import aiohttp
import json

ltc_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ LTC
class WithdrawLTCState(StatesGroup):
    waiting_for_address = State()
    waiting_for_amount = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è Litecoin –∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@ltc_router.callback_query(lambda call: call.data in ["ltc_menu", "ltc_info", "ltc_new_address", "ltc_withdraw", "back_to_main"])
@is_admin
async def ltc_menu_handler(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    if callback_query.data == "ltc_menu":
        await callback_query.message.edit_text("LTC Menu:", reply_markup=ltc_menu())
    elif callback_query.data == "ltc_info":
        await get_ltc_info(callback_query)
    elif callback_query.data == "ltc_new_address":
        await create_ltc_address(callback_query)
    elif callback_query.data == "ltc_withdraw":
        response_message = await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ LTC:", reply_markup=cancel_check_menu())
        await state.update_data(address_message_id=response_message.message_id)
        await state.set_state(WithdrawLTCState.waiting_for_address)
    elif callback_query.data == "back_to_main":
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ Litecoin
async def get_ltc_info(callback_query: CallbackQuery, **kwargs):
    url = f"http://{LITECOIN_IP}:{LITECOIN_PORT}/"
    headers = {'content-type': 'text/plain;'}
    
    blockchain_info_data = {
        "jsonrpc": "1.0",
        "id": "python_request",
        "method": "getblockchaininfo",
        "params": []
    }

    balance_data = {
        "jsonrpc": "1.0",
        "id": "python_request",
        "method": "getbalance",
        "params": []
    }

    try:
        blockchain_response = requests.post(url, auth=(LITECOIN_LOGIN, LITECOIN_PASSWORD), data=json.dumps(blockchain_info_data), headers=headers)
        blockchain_result = blockchain_response.json()

        balance_response = requests.post(url, auth=(LITECOIN_LOGIN, LITECOIN_PASSWORD), data=json.dumps(balance_data), headers=headers)
        balance_result = balance_response.json()

        balance_ltc = balance_result.get('result', 0)
        ltc_to_usd = await get_ltc_to_usd_rate()

        balance_usd = balance_ltc * ltc_to_usd

        verification_progress = blockchain_result['result'].get('verificationprogress', 0) * 100
        size_on_disk_gb = blockchain_result['result'].get('size_on_disk', 0) / (1024 ** 3)
        datadir = blockchain_result['result'].get('datadir', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        formatted_info = (
            f"üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–µ Litecoin:</b>\n\n"
            f"üìä <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {verification_progress:.2f}%\n"
            f"üíæ <b>–í–µ—Å –Ω–∞ –¥–∏—Å–∫–µ:</b> {size_on_disk_gb:.2f} GB\n"
            f"üìÇ <b>–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º:</b> {html.escape(datadir)}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance_ltc:.8f} LTC (~${balance_usd:,.2f})\n"
        )
    except Exception as e:
        formatted_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ: {html.escape(str(e))}"

    await callback_query.message.edit_text(formatted_info, reply_markup=ltc_menu(show_back_button=True), parse_mode=ParseMode.HTML)
    await callback_query.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Litecoin-–∞–¥—Ä–µ—Å–∞
async def create_ltc_address(callback_query: CallbackQuery, **kwargs):
    url = f"http://{LITECOIN_IP}:{LITECOIN_PORT}/"
    headers = {'content-type': 'text/plain;'}
    
    new_address_data = {
        "jsonrpc": "1.0",
        "id": "python_request",
        "method": "getnewaddress",
        "params": []
    }

    try:
        response = requests.post(url, auth=(LITECOIN_LOGIN, LITECOIN_PASSWORD), data=json.dumps(new_address_data), headers=headers)
        result = response.json()
        
        new_address = result.get('result', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å')
        formatted_info = f"üè¶ <b>–ù–æ–≤—ã–π Litecoin-–∞–¥—Ä–µ—Å:</b>\n\nüîë <code>{new_address}</code>"
    except Exception as e:
        formatted_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {html.escape(str(e))}"

    await callback_query.message.edit_text(formatted_info, reply_markup=ltc_menu(show_back_button=True), parse_mode=ParseMode.HTML)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
@ltc_router.message(WithdrawLTCState.waiting_for_address)
async def handle_withdraw_address(message: types.Message, state: FSMContext, **kwargs):
    address = message.text
    if not address:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    user_data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if "address_message_id" in user_data:
        try:
            await message.bot.delete_message(message.chat.id, user_data['address_message_id'])
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥—Ä–µ—Å–æ–º
    try:
        await message.delete()
    except Exception:
        pass

    await state.update_data(address=address)

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã
    response_message = await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=cancel_check_menu())
    await state.update_data(amount_message_id=response_message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(WithdrawLTCState.waiting_for_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã
@ltc_router.message(WithdrawLTCState.waiting_for_amount)
async def handle_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))  
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        return

    user_data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã (–±–æ—Ç–∞)
    if "amount_message_id" in user_data:
        try:
            await message.bot.delete_message(message.chat.id, user_data['amount_message_id'])
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É–º–º–æ–π
    try:
        await message.delete()
    except Exception:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    confirmation_message = await message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} LTC –Ω–∞ –∞–¥—Ä–µ—Å {user_data['address']}.\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.",
        reply_markup=confirm_cancel_menu()
    )
    await state.update_data(confirmation_message_id=confirmation_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@ltc_router.callback_query(lambda call: call.data == "confirm_withdraw_ltc")
async def confirm_withdraw_ltc(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    address = user_data.get('address')
    amount = user_data.get('amount')

    if not address or not amount:
        await call.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (–±–æ—Ç–∞)
    if "confirmation_message_id" in user_data:
        try:
            await call.message.bot.delete_message(call.message.chat.id, user_data['confirmation_message_id'])
        except Exception:
            pass

    url = f"http://{LITECOIN_IP}:{LITECOIN_PORT}/"
    headers = {'content-type': 'text/plain;'}
    data = {
        "jsonrpc": "1.0",
        "id": "python_request",
        "method": "sendtoaddress",
        "params": [address, amount, "", "", True]  # True –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è subtractfeefromamount
    }

    try:
        response = requests.post(url, auth=(LITECOIN_LOGIN, LITECOIN_PASSWORD), data=json.dumps(data), headers=headers)
        result = response.json()
        if 'error' in result and result['error']:
            error_msg = result['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ LTC: {error_msg}", reply_markup=ltc_menu())
        else:
            txid = result.get('result', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TXID')
            await call.message.answer(f"‚úÖ LTC —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! TXID: {txid}", reply_markup=ltc_menu())
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ LTC: {html.escape(str(e))}", reply_markup=ltc_menu())

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@ltc_router.callback_query(lambda call: call.data == "cancel_check_address_ltc")
async def cancel_check_address_ltc(call: CallbackQuery, state: FSMContext, **kwargs):
    await state.clear()
    await call.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ltc_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ LTC –∫ –¥–æ–ª–ª–∞—Ä—É
async def get_ltc_to_usd_rate():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=litecoin&vs_currencies=usd"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data["litecoin"]["usd"]
            else:
                return None
