import json
import html
from aiogram import Router, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from config.config import TRON_IP, TRON_PORT
from bot.menus.trx_menu import trx_menu, back_to_trx_menu
from bot.menus.main_menu import main_menu
from tronpy import Tron, keys
import requests

trx_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Tron
tron = Tron(network=f"http://{TRON_IP}:{TRON_PORT}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è TRX
@trx_router.callback_query(lambda call: call.data in ["back_to_main", "trx_menu", "trx_info", "trx_generate_address", "back_to_trx_menu"])
async def trx_menu_handler(callback_query: CallbackQuery, **kwargs):
    if callback_query.data == "trx_menu":
        await update_message(callback_query.message, "TRX Menu:", trx_menu())
    elif callback_query.data == "trx_info":
        await get_trx_info(callback_query)
    elif callback_query.data == "trx_generate_address":
        await generate_trx_address(callback_query)
    elif callback_query.data == "back_to_trx_menu":
        await update_message(callback_query.message, "TRX Menu:", trx_menu())
    elif callback_query.data == "back_to_main":
        await update_message(callback_query.message, "Main Menu:", main_menu())

async def update_message(message: types.Message, new_text: str, new_markup: InlineKeyboardMarkup):
    if message.text != new_text or message.reply_markup != new_markup:
        await message.edit_text(new_text, reply_markup=new_markup, parse_mode=ParseMode.HTML)
    else:
        await message.answer("‚ùì –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ.")

async def update_message(message: types.Message, new_text: str, new_markup: InlineKeyboardMarkup):
    current_text = message.text
    current_markup = message.reply_markup

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π
    if current_text == new_text and current_markup == new_markup:
        print("–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–∏–º–∏.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.edit_text(new_text, reply_markup=new_markup, parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(callback_query: CallbackQuery):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        await update_message(callback_query.message, "Main Menu:", main_menu())
        await callback_query.answer()
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: {str(e)}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ TRX
async def get_trx_info(callback_query: CallbackQuery, **kwargs):
    url = f"http://{TRON_IP}:{TRON_PORT}/wallet/getnodeinfo"
    
    try:
        response = requests.get(url)
        result = response.json()

        if 'activeConnectCount' in result:
            active_connections = result.get("activeConnectCount", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            version = result.get("configNodeInfo", {}).get("codeVersion", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            block_info = result.get("block", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            cpu_rate = result.get("machineInfo", {}).get("cpuRate", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            free_memory = result.get("machineInfo", {}).get("freeMemory", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            formatted_info = (
                f"üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–µ TRX:</b>\n\n"
                f"üåê <b>–í–µ—Ä—Å–∏—è:</b> {version}\n"
                f"üîó <b>–ë–ª–æ–∫:</b> {block_info}\n"
                f"üì∂ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {active_connections}\n"
                f"üñ• <b>–ó–∞–≥—Ä—É–∑–∫–∞ CPU:</b> {cpu_rate}%\n"
                f"üíæ <b>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å:</b> {free_memory} –±–∞–π—Ç\n"
            )
        else:
            formatted_info = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ TRX."
    except Exception as e:
        formatted_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ: {html.escape(str(e))}"

    await update_message(callback_query.message, formatted_info, back_to_trx_menu())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ TRX-–∞–¥—Ä–µ—Å–∞
@trx_router.callback_query(lambda call: call.data == "trx_generate_address")
async def generate_trx_address(callback_query: CallbackQuery):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å –ø–æ–º–æ—â—å—é Tronpy
        private_key = keys.PrivateKey.random()
        address = private_key.public_key.to_base58check_address()
        
        formatted_info = (
            f"üí≥ <b>–ù–æ–≤—ã–π TRX-–∞–¥—Ä–µ—Å:</b> <code>{address}</code>\n"
            f"üîë <b>–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:</b> <code>{private_key.hex()}</code>"
        )
    except Exception as e:
        formatted_info = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: {str(e)}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update_message(callback_query.message, formatted_info, back_to_trx_menu())
    await callback_query.answer()
